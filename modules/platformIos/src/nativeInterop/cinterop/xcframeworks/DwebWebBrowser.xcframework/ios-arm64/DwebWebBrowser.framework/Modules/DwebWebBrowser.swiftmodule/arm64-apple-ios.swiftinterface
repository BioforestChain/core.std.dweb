// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios17.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name DwebWebBrowser
import AVFoundation
import Combine
import CoreData
import DeveloperToolsSupport
@_exported import DwebBrowserCommon
import DwebPlatformIosKit
import Foundation
import Network
import Observation
import Swift
import SwiftData
import SwiftUI
import UIKit
import WebKit
import _AVKit_SwiftUI
import _Concurrency
import _QuickLook_SwiftUI
import _StringProcessing
import _SwiftConcurrencyShims
import _SwiftData_SwiftUI

extension UIKit.UIApplication {
  @_Concurrency.MainActor(unsafe) public var currentWindow: UIKit.UIWindow? {
    get
  }
}
public struct CodeScannerView : SwiftUI.UIViewControllerRepresentable {
  public init(codeTypes: [AVFoundation.AVMetadataObject.ObjectType], scanMode: DwebWebBrowser.ScanMode = .once, manualSelect: Swift.Bool = false, scanInterval: Swift.Double = 2.0, showViewfinder: Swift.Bool = false, simulatedData: Swift.String = "", shouldVibrateOnSuccess: Swift.Bool = true, isTorchOn: Swift.Bool = false, isGalleryPresented: SwiftUI.Binding<Swift.Bool> = .constant(false), videoCaptureDevice: AVFoundation.AVCaptureDevice? = AVCaptureDevice.default(for: .video), completion: @escaping (Swift.Result<DwebWebBrowser.ScanResult, DwebWebBrowser.ScanError>) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func makeUIViewController(context: DwebWebBrowser.CodeScannerView.Context) -> DwebWebBrowser.ScannerViewController
  @_Concurrency.MainActor(unsafe) public func updateUIViewController(_ uiViewController: DwebWebBrowser.ScannerViewController, context: DwebWebBrowser.CodeScannerView.Context)
  public typealias Body = Swift.Never
  public typealias Coordinator = Swift.Void
  public typealias UIViewControllerType = DwebWebBrowser.ScannerViewController
}

extension Foundation.Bundle {
  public static var browser: Foundation.Bundle {
    get
  }
  public static var browserResources: Foundation.Bundle {
    get
  }
}
public struct DwebUIScollView<Content> : SwiftUI.UIViewRepresentable where Content : SwiftUI.View {
  public typealias UIViewType = UIKit.UIScrollView
  @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class Coordinator : ObjectiveC.NSObject, UIKit.UIScrollViewDelegate {
    @_Concurrency.MainActor(unsafe) @objc public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
    @_Concurrency.MainActor(unsafe) @objc public func scrollViewWillBeginDragging(_ scrollView: UIKit.UIScrollView)
    @_Concurrency.MainActor(unsafe) @objc public func scrollViewDidEndDragging(_ scrollView: UIKit.UIScrollView, willDecelerate decelerate: Swift.Bool)
    @_Concurrency.MainActor(unsafe) @objc public func scrollViewDidEndDecelerating(_ scrollView: UIKit.UIScrollView)
    @objc deinit
  }
  @_Concurrency.MainActor(unsafe) public func makeCoordinator() -> DwebWebBrowser.DwebUIScollView<Content>.Coordinator
  @_Concurrency.MainActor(unsafe) public func makeUIView(context: DwebWebBrowser.DwebUIScollView<Content>.Context) -> UIKit.UIScrollView
  @_Concurrency.MainActor(unsafe) public func updateUIView(_ uiView: UIKit.UIScrollView, context: DwebWebBrowser.DwebUIScollView<Content>.Context)
  public typealias ContentAction = () -> Content
  public typealias ScrolledAction = (CoreFoundation.CGPoint) -> Swift.Void
  public typealias WillDragAction = () -> Swift.Void
  public typealias DeceleratedAction = () -> Swift.Void
  public init(@SwiftUI.ViewBuilder content: @escaping () -> Content, scrolled: ((CoreFoundation.CGPoint) -> Swift.Void)? = nil, willDrage: (() -> Swift.Void)? = nil, endDecelerated: (() -> Swift.Void)? = nil)
  public typealias Body = Swift.Never
}

public struct DownloadAudioPreviewView {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14DwebWebBrowser24DownloadAudioPreviewViewV4bodyQrvp", 0) __
}
public struct DownloadVideoPreviewView {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14DwebWebBrowser24DownloadVideoPreviewViewV4bodyQrvp", 0) __
}

public struct DownloadAudioPCMWaveSlider : SwiftUI.View {
  public init(audioUrl: Foundation.URL, isPlaying: SwiftUI.Binding<Swift.Bool>, progress: SwiftUI.Binding<CoreFoundation.CGFloat>)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14DwebWebBrowser26DownloadAudioPCMWaveSliderV4bodyQrvp", 0) __
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class ScannerViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @objc deinit
}
extension DwebWebBrowser.ScannerViewController : UIKit.UIImagePickerControllerDelegate, UIKit.UINavigationControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func imagePickerController(_ picker: UIKit.UIImagePickerController, didFinishPickingMediaWithInfo info: [UIKit.UIImagePickerController.InfoKey : Any])
  @_Concurrency.MainActor(unsafe) @objc dynamic public func imagePickerControllerDidCancel(_ picker: UIKit.UIImagePickerController)
}
extension DwebWebBrowser.ScannerViewController : AVFoundation.AVCaptureMetadataOutputObjectsDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func metadataOutput(_ output: AVFoundation.AVCaptureMetadataOutput, didOutput metadataObjects: [AVFoundation.AVMetadataObject], from connection: AVFoundation.AVCaptureConnection)
}
extension DwebWebBrowser.ScannerViewController : AVFoundation.AVCapturePhotoCaptureDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func photoOutput(_ output: AVFoundation.AVCapturePhotoOutput, didFinishProcessingPhoto photo: AVFoundation.AVCapturePhoto, error: (any Swift.Error)?)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func photoOutput(_ output: AVFoundation.AVCapturePhotoOutput, willCapturePhotoFor resolvedSettings: AVFoundation.AVCaptureResolvedPhotoSettings)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func photoOutput(_ output: AVFoundation.AVCapturePhotoOutput, didCapturePhotoFor resolvedSettings: AVFoundation.AVCaptureResolvedPhotoSettings)
}
extension AVFoundation.AVCaptureDevice {
  public static var bestForVideo: AVFoundation.AVCaptureDevice? {
    get
  }
}
public enum ScanError : Swift.Error {
  case badInput
  case badOutput
  case initError(_: any Swift.Error)
  case permissionDenied
}
public struct ScanResult {
  public let string: Swift.String
}
public enum ScanMode {
  case once
  case oncePerCode
  case continuous
  case manual
  public static func == (a: DwebWebBrowser.ScanMode, b: DwebWebBrowser.ScanMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class NetworkManager {
  public var isNetworkAvailable: Swift.Bool {
    get
    set
  }
  public init()
  public func checkNetworkPermission()
  @objc deinit
}
extension DwebWebBrowser.NetworkManager : Observation.Observable {
}
public struct NetworkGuidView : SwiftUI.View {
  public init()
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s14DwebWebBrowser15NetworkGuidViewV4bodyQrvp", 0) __
}
@objc @_Concurrency.MainActor(unsafe) public class DwebWebView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public init(frame: CoreFoundation.CGRect, delegate: (any DwebWebBrowser.WebBrowserViewDelegate)?, dataSource: (any DwebWebBrowser.WebBrowserViewDataSource)?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension DwebWebBrowser.DwebWebView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func doSearch(key: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func doNewTabUrl(url: Swift.String, target: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func loadPullMenuConfig(isActived: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func colorSchemeChanged(color: Swift.Int32)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func gobackIfCanDo() -> Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) dynamic public func browserClear()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func browserActive(on: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func prepareToKmp()
}


@objc public class WebBrowserViewSiteData : ObjectiveC.NSObject {
  @objc public init(id: Swift.Int64, title: Swift.String, url: Swift.String, iconCreater: @escaping () -> UIKit.UIImage?)
  @objc deinit
}
@objc public protocol WebBrowserViewDelegate {
  @objc func createDesktopLink(link: Swift.String, title: Swift.String, iconString: Swift.String, completionHandler: @escaping (Foundation.NSError?) -> Swift.Void)
  @objc func recognizedScreenGestures()
  @objc func openDeepLink(url: Swift.String)
  @objc func readFile(path: Swift.String, completed: @escaping (Foundation.NSData?, Foundation.NSError?) -> Swift.Void)
  @objc func doAction(name: Swift.String, params: [Swift.String : Swift.String]?)
}
@objc public protocol WebBrowserViewDataSource : DwebWebBrowser.BookMarkDataSource, DwebWebBrowser.DownloadDataSource, DwebWebBrowser.HistoryDataSource, DwebWebBrowser.PermissionDataSource, DwebWebBrowser.TracklessDataSource, DwebWebBrowser.WebBrowserViewWebDataSource {
  @objc func getDatas(for: Swift.String, params: [Swift.String : Swift.AnyObject]?) -> [Swift.String : Swift.AnyObject]?
}
@objc public protocol PermissionDataSource {
  @objc func requestCameraPermission(completed: @escaping (Swift.Bool) -> Swift.Void)
}
@objc public protocol WebBrowserViewWebDataSource {
  typealias WebType = DwebPlatformIosKit.DwebWKWebView
  @objc func getWebView() -> Self.WebType
  @objc func destroyWebView(web: Self.WebType)
}
@objc public protocol TracklessDataSource {
  @objc var trackModel: Swift.Bool { get set }
}
@objc public protocol BookMarkDataSource {
  @objc func loadBookmarks() -> [DwebWebBrowser.WebBrowserViewSiteData]?
  @objc func addBookmark(title: Swift.String, url: Swift.String, icon: Foundation.Data?)
  @objc func removeBookmark(bookmark: Swift.Int64)
}
@objc public protocol HistoryDataSource {
  @objc func loadHistorys() -> [Swift.String : [DwebWebBrowser.WebBrowserViewSiteData]]?
  @objc func loadMoreHistory(off: Swift.Int32, completionHandler: @escaping (Foundation.NSError?) -> Swift.Void)
  @objc func addHistory(title: Swift.String, url: Swift.String, icon: Foundation.Data?, completionHandler: @escaping (Foundation.NSError?) -> Swift.Void)
  @objc func removeHistory(history: Swift.Int64, completionHandler: @escaping (Foundation.NSError?) -> Swift.Void)
}
@objc @objcMembers public class WebBrowserViewDownloadData : ObjectiveC.NSObject {
  @objc public init(name: Swift.String, date: Swift.UInt64, size: Swift.UInt32, mime: Swift.String, status: Swift.UInt8, id: Swift.String, progress: Swift.Float, localPath: Swift.String?)
  @objc deinit
}
@objc public protocol DownloadDataSource {
  @objc func loadAllDownloadDatas() -> [DwebWebBrowser.WebBrowserViewDownloadData]?
  @objc func removeDownload(ids: [Swift.String])
  @objc func addDownloadObserver(id: Swift.String, didChanged: @escaping (DwebWebBrowser.WebBrowserViewDownloadData) -> Swift.Void)
  @objc func removeAllDownloadObservers()
  @objc func pauseDownload(id: Swift.String)
  @objc func resumeDownload(id: Swift.String)
  @objc func localPathFor(id: Swift.String) -> Swift.String?
}

@objc @_inheritsConvenienceInitializers public class BookmarkEntity : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension DwebWebBrowser.BookmarkEntity {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<DwebWebBrowser.BookmarkEntity>
  @objc @NSManaged dynamic public var createdDate: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Foundation.UUID? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var imageName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var link: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var title: Swift.String? {
    @objc get
    @objc set
  }
}
extension DwebWebBrowser.BookmarkEntity : Swift.Identifiable {
  public typealias ID = Foundation.UUID?
}
@objc @_inheritsConvenienceInitializers public class HistoryEntity : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension DwebWebBrowser.HistoryEntity {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<DwebWebBrowser.HistoryEntity>
  @objc @NSManaged dynamic public var createdDate: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Foundation.UUID? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var imageName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var link: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var title: Swift.String? {
    @objc get
    @objc set
  }
}
extension DwebWebBrowser.HistoryEntity : Swift.Identifiable {
  public typealias ID = Foundation.UUID?
}
@available(iOS 17.0, tvOS 17.0, *)
@available(watchOS, unavailable)
extension UIKit.UIImage {
  #warning("The "add" image asset name resolves to a conflicting UIImage symbol "add". Try renaming the asset.")
}
extension DwebWebBrowser.DownloadAudioPreviewView : SwiftUI.View {}
extension DwebWebBrowser.DownloadVideoPreviewView : SwiftUI.View {}
extension DwebWebBrowser.ScanMode : Swift.Equatable {}
extension DwebWebBrowser.ScanMode : Swift.Hashable {}
